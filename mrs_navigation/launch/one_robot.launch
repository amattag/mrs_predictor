<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      one_robot.launch
\authors   Antonio Matta <antonio.matta@upm.es>
\copyright Copyright (c) 2017, Universida Politecnica de Madrid., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Launch file to start and simulate in Gazebo a Summi-XL robot.

Version: 1.0 $Id$: $file$ 2017-05-31
-->
<launch>
		<!-- roslaunch arguments -->
    <arg name="robot_name"/>
    <arg name="init_pose"/>
    
    <!-- Xacro xml robot description loaded on the Parameter Server-->
    <param name="robot_description"
         command="$(find xacro)/xacro.py '$(find summit_xl_description)/robots/summit_xl.urdf.xacro'" />
    
    <!-- Source that publishes the joint positions as a sensor_msgs/JointState --> 
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    
    <!-- Publish all the frames to TF by using the Robot State Publisher-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen"/>   
          
    <!-- Run navigation stack -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">  
      <remap from="map" to="/map" />         
      <param name="controller_frequency" value="10.0" />
      <rosparam file="$(find mrs_navigation)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find mrs_navigation)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find mrs_navigation)/config/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find mrs_navigation)/config/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find mrs_navigation)/config/base_local_planner_params.yaml" command="load" />      
    </node>   

   <!-- Fake localization: Uses the ground truth odometry from the P3D Gazebo plugin. 
        This is necessary to provide a global frame of reference. -->
    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen"> 
      <param name="odom_frame_id" value="$(arg robot_name)/odom" />
      <param name="base_frame_id" value="$(arg robot_name)/base_link" />
    </node> 
     
   <!-- AMCL node: It implements the Adaptive Monte Carlo localization approach, 
        which uses a particle filter to track the pose of a robot against a known 
        map.
		<include file="$(find mrs_navigation)/launch/includes/amcl_node.xml"/>
		<remap from="map" to="/map" /> 
   --> 
 
   <!--Add a static transform publisher between base_link and laser_link frames --> 
   <node pkg="tf" type="static_transform_publisher" name="laser_link_broadcaster" args="0 0 1 0 0 0 $(arg robot_name)/base_link $(arg robot_name)/laser_link 100" />
   
   <!--Spawn the robot in the Gazebo 3D Simulator --> 
   <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
      args="$(arg init_pose) -urdf -param robot_description -model $(arg robot_name)" output="screen"/>
      
</launch>
